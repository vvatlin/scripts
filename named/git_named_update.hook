#!/bin/bash
#
# Update hook
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# the main idea taken from puppet update hook: 
#	http://projects.puppetlabs.com/projects/1/wiki/Puppet_Version_Control
# Setup: move this script to <repo>.git/hooks/update
#	All zone files need to be in the form: <domain.com>.zone

NOBOLD="\033[0m"
BOLD="\033[1m"
BLACK="\033[30m"
GREY="\033[0m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
WHITE="\033[37m"

confsyntax_check="/usr/sbin/named-checkconf"
zonesyntax_check="/usr/sbin/named-checkzone"
tmp=$(mktemp /tmp/git.update.XXXXXX)
log=$(mktemp /tmp/git.update.log.XXXXXX)
tree=$(mktemp /tmp/git.diff-tree.XXXXXX)

git diff-tree -r "$2" "$3" > $tree

echo
echo diff-tree:
cat $tree

exit_status=0

while read old_mode new_mode old_sha1 new_sha1 status name ;do
	# skip lines showing parent commit
	test -z "$new_sha1" && continue
	# skip deletions
	[ "$new_sha1" = "0000000000000000000000000000000000000000" ] && continue
	# Only test named.conf or *.zone files
	if [[ $name == "named.conf" ]]; then
		git cat-file blob $new_sha1 > $tmp
		set -o pipefail
		$confsyntax_check $tmp 2>&1 | sed 's|/tmp/git.update.......:\([0-9]*\)$|JOJOMOJO:\1|'> $log
		if [[ $? != 0 ]]; then
			echo
			echo -e "$(cat $log | sed 's|JOJOMOJO|'\\${RED}${name}\\${NOBOLD}'|')" >&2
			echo -e "For more details run this: ${CYAN} git diff $old_sha1 $new_sha1 ${NOBOLD}" >&2 
			echo
			exit_status=1
		fi
	elif [[ $name =~ [.]zone$ ]]; then 
		git cat-file blob $new_sha1 > $tmp
		zonename=$(echo $name | sed -e 's#^.*/\(.*\)\.zone#\1#')
		set -o pipefail
		$zonesyntax_check $zonename $tmp 2>&1 | sed 's|/tmp/git.update.......:\([0-9]*\)$|JOJOMOJO:\1|'> $log
		if [[ $? != 0 ]]; then
			echo
			echo -e "$(cat $log | sed 's|JOJOMOJO|'\\${RED}${name}\\${NOBOLD}'|')" >&2
			echo -e "For more details run this: ${CYAN} git diff $old_sha1 $new_sha1 ${NOBOLD}" >&2 
			echo
			exit_status=1
		fi
	fi
done < $tree

rm -f $log $tmp $tree
exit $exit_status
